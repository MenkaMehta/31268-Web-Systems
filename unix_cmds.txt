PIPING AND WILDCARDS

WC: displays a count of lines, words and characters
wc -m: count characters
wc -w: count words delimited by white space characters /new line characters
wc -l: count lines

tail: delivers the last part of the file.
tail -n: n=number of starting locations in the file is measured in lines instead of bytes. Eg tail -n3  means 3 last lines.

Ls: list the contents of the directory
ls -R: includes the contents of the subdirectories
ls -r: reverses the order of how files are displayed
ls -t: shows you the files in modification time

cp: copies files from one location to another
cp -r: copy directories recursively

>>: append the standard output to a file (command >> file)
*: wildcard match any number of characters
?: wildcard match one character.

Ryan Heise: tutorial week 7

programs are created using (vim hello.sh)

echo hello -> outputs -> hello
head file  - outputs 10 first lines of the file
tail file – outputs 10 last lines of the file

asciinema program to record video

// make sure you write the stuffs you learnt today

Ryan Heise week8 tutorial

1> put the standard output into something (a file)
2> put the standard error into something (a file)
echo "* is $*" -> prints all arguments
echo "# is $#" -> prints all number of arguments
cal 1>&2 ---→ redirecting the output to standard error

writing comments in bash syntax:
start with # ------

Shebang: #!/bin/bash
Always start writing a bash program by keeping the above code in the first line.
No space needed and should start exactly at the beginning of the line

running a bash program: ./file.sh

################Overall week 7 and week 8 revision:
1. HELLO PROGRAM -Ryan Heise

#!/bin/bash
echo -n "Hello, who are you? "
read name
echo "Hello, $name"
echo -n "How old are you? "
read age

x=3 # no spaces here!

if [ $age -gt 17 ] # spaces here required!!
then
    echo "Here's your beer!"
else
    echo "No beer for you!"
fi

#MY FIRST PROGRAM -Ryan Heise

#!/bin/bash

ls
# print out the current date
date
whoami # print out my username
#SWAP PROGRAM – Ryan Heise
#!/bin/bash

if [ $# -ne 2 ]
then
    echo "Usage: ./swap.sh word1 word2" 1>&2
    exit 1
fi

echo $2 $1

#VARIABLE PROGRAM – Ryan Heise
#!/bin/bash

x=3

echo "x is $x"
echo "1 is $1"
echo "2 is $2"
echo "3 is $3"
echo "* is $*"
echo "# is $#"

WEEK9 -Ryan Heise
FILE NAME : regex.txt

hello```dag`14/11/1992``Ryan`````````````li@uts.edu.au`<p>``````````````````````
helo````deg`28/12/2001``Ryan Heise```````mike@sun.com``<br>`````````````````````
heo`````dig`12/08/2015``Massimo Piccardi`andrew@com````<p>the dog chased the cat
helllo``dog`07/07/2016``Paul Sutcliffe```andrew@```````<table border="1">`````">
hellllo`dug`19/192/2013`Ryan Chadwick````@sun.com``````<br clear="all">`````````
cat`````dmg`1/8/2017````Jamie Lee Curtis`joe33@sun.com`<img src="dog" alt="dog">
catch```d@g`2/14/201023`David Lee Roth```@`````````````<img src="dog" alt="">```

NOTES:
/ symbol is used to search strings in a text file
hel*o  -> zero or more l's
hel+o -> one or more l's
hel?o -> zero or one l's
hel {2}o -> exactly 2 l's
hel{2,4} between 2 and 4 l's
hel{2, }o atleast 2 l's
hel{ ,4}o at most 4 l's
hel{1, } same as l+
hel{0,1}o same as l?
hel{0, }o same as l*
d[io]g  d followed by either an i or o followed by a g
/d.g all words starting from d and ending with a g---- . means all characters including @ :-)
[aeiou] a vowel
a|e|i|o|u a vowel
[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]
[a-zA-Z]
[012456789] a digit
[0-9]
[^aeiou] any character EXCEPT for a vowel
cat|dog -> cat OR dog
dog*
(dog)*
^cat  the beginning of the line
          followed by a c
          followed by an a
          followed by a t
cat$    $ means the end of the line
\<cat\>  ------------------ \< start of a word
\<cat\>  ------------------ \> end of a word
.             any character
\.            an actual dot
\$            an actual dollar sign

ON THE TERMINAL
if we do:
grep hello regex.txt ,,,,,,,,,,,,,,,,works fine
grep 'hel*o'   regex.txt,,,,,,,,,,,,,,,,works fine
grep 'hel+o' regex.txt,,,,,,,,,,,,,,,,,,sorry doesnt work
//TO SOLVE THIS PROBLEM
//use EGREP
egrep 'hel+o' regex.txt,,,,,,,,,,,works fine
OR
grep 'hel\+o' regex.txt,,,,,,,,,,,,works perfect

//SEARCH FOR DIGITS
grep '[0-9]' regex.txt
//SEARCH FOR DATE
egrep '[0-9]{2}/[0-9]{2}/[0-9]{4}' regex.txt
//you only get dates in this format 12/06/2013

egrep '[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}' regex.txt
//gets dates in all formats even 1/4/2014

//SEARCH FOR CAT
grep 'cat' regex.txt,,,,,,,,not good prints "catch" as well
TO SOLVE THIS PROBLEM
grep 'cat\>' regex.txt,,,,,,,,,works perfect

//If you have names like
Menka Mehta
Ryan Heise
John Thai
Ben Franzi

/[A-Z][a-z]* ( [A-Z][a-z]*)*

//FINDING EMAILS
/[a-z0-9]+@[a-z]+(\. [a-z]+)+
